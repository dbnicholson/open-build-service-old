#! /bin/bash
#
# Script which takes .deb and .dsc and includes them into repository using reprepro

_extrep="${1:-/obs/repos/DISTRO/standard}"
_projid="${2:-DISTRO}"
_repoid="${3:-standard}"
extrep="$(echo ${1:-/obs/repos/DISTRO/standard}|sed 's/:/:\//g')"
projid="$(echo ${2:-DISTRO}|sed 's/:/:\//g')"
repoid="$(echo ${3:-standard}|sed 's/:/:\//g')"
repodeb="/obs/debianrepos/"
drepo="${repodeb}/${projid}/${repoid}/"
dwwwrepo="/obs/repos/debian/"
hostname="${HOSTNAME:-localhost}"
portname="${PORTNAME:-82}"
arches="amd64 armhf i386 source"
alsoaccept="unstable testing precise"
obslog="/obs/log/"
codename="fake"
distro="DISTRO"
component="main"

case "${_projid}" in
*:*:*) IFS=: read -r distro codename component <<<"${_projid}" ;;
esac

# -- Setup reprepro Debian repository
repo_setup() {
	cd "${drepo}"/conf
	if [ ! -f distributions ]; then
		cat > distributions <<-EOF
		Codename: ${codename}
		#Suite: ${projid}
		AlsoAcceptFor: ${alsoaccept}
		Version: 0.1
		Origin: ${distro}
		Description: Debian repository ${_repoid} for project ${_projid}
		Architectures: ${arches}
		Components: ${component}
		#UDebComponents: main
		DebIndices: Packages Release . .gz
		#UDebIndices: Packages Release . .gz
		Tracking: all includechanges keepsources
		Log: reprepro.log
		Update: - up-from-${hostname}
		EOF
	fi
	if [ ! -f incoming ]; then
		cat > incoming <<-EOF
		Name: ${repoid}
		IncomingDir: ../incoming
		TempDir: ../incoming-tmp
		Allow: unstable>${repoid}
		EOF
	fi
	if [ ! -f updates ]; then
		cat > updates <<-EOF
		Name: up-from-${hostname}
		Method: http://${hostname}:${portname}/${projid}/${repoid}
		Suite: ./
		Architectures: ${arches}
		#VerifyRelease: blindtrust
		IgnoreRelease: yes
		Flat: ${component}
		EOF
	fi
	# Since reprepro 4.12.0, need to ignore InRelease file
	if dpkg --compare-versions `reprepro --version 2>&1 | awk '{ print $NF }'` ge 4.12.0
	then
		echo "GetInRelease: no" >> updates
	fi

	cd "${drepo}"
	mkdir -p incoming
	mkdir -p incoming-tmp

	reprepro export
	reprepro createsymlinks

	mkdir -p "${dwwwrepo}/${projid}/${repoid}/"
	cd "${dwwwrepo}/${projid}/${repoid}/"
	ln -sf "${drepo}"/pool
	ln -sf "${drepo}"/dists

	repo_gen_sources
}

# -- Include (brute-force) binary packages under published repository into reprepro
repo_includedeb_bin () {
cd "${drepo}"
for pkg in $(find "${extrep}" \( -name :full -o -name :repo \) -prune -o \( -type f -name *.deb -print \)); do
	reprepro includedeb "${repoid}" "${pkg}";
done
}

# -- Include (brute-force) source packages under build directory into reprepro
repo_includedsc_src () {
cd "${drepo}"
for pkg in $(find /obs/build/$projid/$repoid/ \( -name :full -o -name :repo \) -prune -o \( -type f -name *.dsc -print \)); do
	reprepro -S main -P "${repoid}" includedsc "${repoid}" "${pkg}";
	#reprepro includedsc ${repoid} $pkg;
done
}

# -- Update repository
repo_update () {
cd "${drepo}"
reprepro --noskipold update
}

# -- Clean up/Delete/Destroy Debian repository
repo_destroy () {
read -n 1 -s -p "WARNING: You are about to destroy "${drepo}". Are you sure? [y/N]" reply
if [ x"$reply" = xy ] || [ x"$reply" = xY ] ; then
	rm -rf "${drepo}"
	rm -f "${dwwwrepo}/${projid}/${repoid}/"/pool
	rm -f "${dwwwrepo}/${projid}/${repoid}/"/dists
	rm -rf "${dwwwrepo}/${projid}/${repoid}/"/apt
	exit 0
fi
}

# -- Create sources.list to help out build dependency parser
repo_gen_sources () {
mkdir -p "${dwwwrepo}/${projid}/${repoid}/apt/sources.list.d/"
mkdir -p "${dwwwrepo}/${projid}/${repoid}/apt/preferences.d/"

cat > "${dwwwrepo}/${projid}/${repoid}/apt/sources.list.d/${repoid}.list" <<-EOF
deb		http://${hostname}:${portname}/debian/${projid}/${repoid} ${repoid} ${component}
deb-src	http://${hostname}:${portname}/debian/${projid}/${repoid} ${repoid} ${component}
EOF

## # Deprecated: used for bootstrapping, before DoD
## cat > "${dwwwrepo}/${projid}/${repoid}/apt/sources.list.d/pristine.list" <<-EOF
## deb-src	http://${hostname}:83/ collabora main
## EOF

cat > "${dwwwrepo}/${projid}/${repoid}/apt/preferences.d/distro" <<-EOF
Package: *
Pin: release n=${repoid}
Pin-Priority: 900
EOF
}

# -- Main

#mkdir -p "${obslog}"/reprepro/
#exec >> "${obslog}"/reprepro/reprepro-$(date +%Y%m%d-%H%M).log 2>&1
exec >> "${obslog}"/reprepro.log 2>&1

# Old. To be deleted.
# echo "Including ${extrep} deb files. Including /obs/build/${projid}/${repoid}/ source."

set -x

if [ ! -d "${drepo}"/conf ] ; then
	mkdir -p "${drepo}"/conf
	repo_setup
fi

repo_update
